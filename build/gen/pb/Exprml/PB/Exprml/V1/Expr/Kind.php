<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: exprml/v1/expr.proto

namespace Exprml\PB\Exprml\V1\Expr;

use UnexpectedValueException;

/**
 * Kind is the kind of the Node.
 *
 * Protobuf type <code>exprml.v1.Expr.Kind</code>
 */
class Kind
{
    /**
     * Unspecified.
     *
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Eval kind.
     *
     * Generated from protobuf enum <code>EVAL = 10;</code>
     */
    const PBEVAL = 10;
    /**
     * Scalar kind.
     *
     * Generated from protobuf enum <code>SCALAR = 11;</code>
     */
    const SCALAR = 11;
    /**
     * Ref kind.
     *
     * Generated from protobuf enum <code>REF = 12;</code>
     */
    const REF = 12;
    /**
     * Obj kind.
     *
     * Generated from protobuf enum <code>OBJ = 13;</code>
     */
    const OBJ = 13;
    /**
     * Arr kind.
     *
     * Generated from protobuf enum <code>ARR = 14;</code>
     */
    const ARR = 14;
    /**
     * Json kind.
     *
     * Generated from protobuf enum <code>JSON = 15;</code>
     */
    const JSON = 15;
    /**
     * Iter kind.
     *
     * Generated from protobuf enum <code>ITER = 16;</code>
     */
    const ITER = 16;
    /**
     * Elem kind.
     *
     * Generated from protobuf enum <code>ELEM = 17;</code>
     */
    const ELEM = 17;
    /**
     * Call kind.
     *
     * Generated from protobuf enum <code>CALL = 18;</code>
     */
    const CALL = 18;
    /**
     * Cases kind.
     *
     * Generated from protobuf enum <code>CASES = 19;</code>
     */
    const CASES = 19;
    /**
     * OpUnary kind.
     *
     * Generated from protobuf enum <code>OP_UNARY = 20;</code>
     */
    const OP_UNARY = 20;
    /**
     * OpBinary kind.
     *
     * Generated from protobuf enum <code>OP_BINARY = 21;</code>
     */
    const OP_BINARY = 21;
    /**
     * OpVariadic kind.
     *
     * Generated from protobuf enum <code>OP_VARIADIC = 22;</code>
     */
    const OP_VARIADIC = 22;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::PBEVAL => 'EVAL',
        self::SCALAR => 'SCALAR',
        self::REF => 'REF',
        self::OBJ => 'OBJ',
        self::ARR => 'ARR',
        self::JSON => 'JSON',
        self::ITER => 'ITER',
        self::ELEM => 'ELEM',
        self::CALL => 'CALL',
        self::CASES => 'CASES',
        self::OP_UNARY => 'OP_UNARY',
        self::OP_BINARY => 'OP_BINARY',
        self::OP_VARIADIC => 'OP_VARIADIC',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

