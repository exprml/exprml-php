<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: exprml/v1/evaluator.proto

namespace Exprml\V1\EvaluateOutput;

use UnexpectedValueException;

/**
 * Status of the evaluation.
 *
 * Protobuf type <code>exprml.v1.EvaluateOutput.Status</code>
 */
class Status
{
    /**
     * Evaluation was successful.
     *
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * Index is invalid.
     *
     * Generated from protobuf enum <code>INVALID_INDEX = 100;</code>
     */
    const INVALID_INDEX = 100;
    /**
     * Key is invalid.
     *
     * Generated from protobuf enum <code>INVALID_KEY = 101;</code>
     */
    const INVALID_KEY = 101;
    /**
     * Type is unexpected.
     *
     * Generated from protobuf enum <code>UNEXPECTED_TYPE = 102;</code>
     */
    const UNEXPECTED_TYPE = 102;
    /**
     * Argument mismatch.
     *
     * Generated from protobuf enum <code>ARGUMENT_MISMATCH = 103;</code>
     */
    const ARGUMENT_MISMATCH = 103;
    /**
     * Cases are not exhaustive.
     *
     * Generated from protobuf enum <code>CASES_NOT_EXHAUSTIVE = 104;</code>
     */
    const CASES_NOT_EXHAUSTIVE = 104;
    /**
     * Reference not found.
     *
     * Generated from protobuf enum <code>REFERENCE_NOT_FOUND = 105;</code>
     */
    const REFERENCE_NOT_FOUND = 105;
    /**
     * Values are not comparable.
     *
     * Generated from protobuf enum <code>NOT_COMPARABLE = 106;</code>
     */
    const NOT_COMPARABLE = 106;
    /**
     * Not a finite number.
     *
     * Generated from protobuf enum <code>NOT_FINITE_NUMBER = 107;</code>
     */
    const NOT_FINITE_NUMBER = 107;
    /**
     * Evaluation was aborted.
     *
     * Generated from protobuf enum <code>ABORTED = 108;</code>
     */
    const ABORTED = 108;
    /**
     * Unknown error.
     *
     * Generated from protobuf enum <code>UNKNOWN_ERROR = 109;</code>
     */
    const UNKNOWN_ERROR = 109;

    private static $valueToName = [
        self::OK => 'OK',
        self::INVALID_INDEX => 'INVALID_INDEX',
        self::INVALID_KEY => 'INVALID_KEY',
        self::UNEXPECTED_TYPE => 'UNEXPECTED_TYPE',
        self::ARGUMENT_MISMATCH => 'ARGUMENT_MISMATCH',
        self::CASES_NOT_EXHAUSTIVE => 'CASES_NOT_EXHAUSTIVE',
        self::REFERENCE_NOT_FOUND => 'REFERENCE_NOT_FOUND',
        self::NOT_COMPARABLE => 'NOT_COMPARABLE',
        self::NOT_FINITE_NUMBER => 'NOT_FINITE_NUMBER',
        self::ABORTED => 'ABORTED',
        self::UNKNOWN_ERROR => 'UNKNOWN_ERROR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

